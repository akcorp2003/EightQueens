Imports System
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Windows.Forms
Imports System.Drawing.Imaging

Public Class ChessBoard
    Private m_graphics As Graphics
    Private backgroundBMP As Bitmap
    Private m_Cells(8, 8) As Boolean
    Private Queens As New List(Of Queen)
    Private m_Solutions As New List(Of Boolean(,))

    Public Property Cells As Boolean(,)
        Get
            Return m_Cells
        End Get
        Set(value As Boolean(,))
            m_Cells = value
        End Set
    End Property

    Public Property Solutions As List(Of Boolean(,))
        Get
            Return m_Solutions
        End Get
        Set(value As List(Of Boolean(,)))
            m_Solutions = value
        End Set
    End Property


    Public Sub New()

        REM automatically generated by User Control
        ' This call is required by the designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.

        DrawBoard()
    End Sub

    Public Sub DrawBoard()

        If Me.Width > 0 And Me.Height > 0 Then
            backgroundBMP = New Bitmap(Me.Width, Me.Height, PixelFormat.Format32bppArgb)
            m_graphics = Graphics.FromImage(backgroundBMP)

            Dim board As New Bitmap(My.Resources.ChessBoard)
            m_graphics.DrawImage(board, New Rectangle(0, 0, Me.Width, Me.Height))

            Dim rect As New RectangleF()
            Dim flip As Boolean = True
            Dim i As Single = 0.0F
            While i <= 7.0F
                Dim j As Single = 0.0F
                While j <= 7.0F

                    If m_Cells(Convert.ToInt32(i), Convert.ToInt32(j)) Then
                        rect = New RectangleF(j * Convert.ToSingle(backgroundBMP.Width / 8.0), _
                                              i * Convert.ToSingle(backgroundBMP.Height / 8.0),
                                              Convert.ToSingle(backgroundBMP.Width / 8.0),
                                              Convert.ToSingle(backgroundBMP.Height / 8.0))
                        Dim bitmap As New Bitmap(My.Resources.QueenImage)
                        m_graphics.DrawImage(bitmap, rect)

                    End If
                    j += 1
                End While
                i += 1
            End While
            Me.Invalidate()
        End If
    End Sub

    Public Sub ResetCells()
        For i As Byte = 0 To 7 Step 1
            For j As Byte = 0 To 7 Step 1
                m_Cells(i, j) = False
            Next
        Next
    End Sub

    Private Sub ChessBoard_Paint(ByVal sender As Object, ByVal e As PaintEventArgs) Handles Me.Paint
        If Not backgroundBMP Is Nothing Then
            Me.BackgroundImage = backgroundBMP
        End If
    End Sub

    Private Sub ChessBoard_Resize(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Resize
        If Not backgroundBMP Is Nothing Then
            DrawBoard()
        End If
    End Sub

    Private Function CheckAll(ByVal Level As Integer) As Boolean
        Dim i As Integer = Level
        While i >= 0
            Dim j As Integer = i - 1
            While j >= 0

                REM same row OrElse
                REM same column OrElse
                REM same diagonal
                If Queens(i).Row = Queens(j).Row OrElse
                    Queens(i).Column = Queens(j).Column OrElse
                    (Queens(i).Row + Queens(i).Column = Queens(j).Row + Queens(j).Column Or
                     Queens(i).Row - Queens(j).Row = Queens(i).Column - Queens(j).Column) Then
                    Return False
                End If

                j -= 1
            End While
            i -= 1
        End While

        Return True
    End Function

    ''' <summary>
    ''' Recursive Function
    ''' </summary>
    ''' <param name="Level"></param>
    ''' <remarks></remarks>
    Private Sub PlaceQueen(ByVal Level As Integer)
        REM Base Case
        If Level > 7 Then
            For j As Integer = 0 To 7 Step 1
                For i As Integer = 0 To 7 Step 1
                    If Queens(j).Row = j And Queens(j).Column = i Then
                        m_Cells(i, j) = True
                    Else
                        m_Cells(i, j) = False
                    End If
                Next
            Next

            'Dim j As Integer = 0
            'While j <= 7
            '    Dim i As Integer = 0
            '    While i <= 7
            '        If Queens(j).Row = j And Queens(j).Column = i Then
            '            m_Cells(i, j) = True
            '        Else
            '            m_Cells(i, j) = False
            '        End If
            '        i += 1
            '    End While
            '    j += 1
            'End While

            Dim clonedCells As Boolean(,) = CType(m_Cells.Clone(), Boolean(,))
            Solutions.Add(clonedCells)
            Return
        End If

        REM always called
        Dim k As Integer = 0
        While k <= 7
            If Level < 8 Then
                Queens(Level).Row = Level
                Queens(Level).Column = k
                If CheckAll(Level) Then
                    PlaceQueen(Level + 1)
                End If
            End If
            k += 1
        End While
    End Sub

    ''' <summary>
    ''' Called at startup
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub GetSolutions()
        Queens.Clear()
        ResetCells()
        DrawBoard()
        Dim j As Integer = 0
        While j <= 7
            Queens.Add(New Queen())
            j += 1
        End While
        Dim i As Integer = 0
        While i <= 7
            Queens(0).Row = 0
            Queens(0).Column = i
            PlaceQueen(1)
            i += 1
        End While
    End Sub
End Class
